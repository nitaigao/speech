// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/cloud/dialogflow/v2beta1/session.proto
// Original file comments:
// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fcloud_2fdialogflow_2fv2beta1_2fsession_2eproto__INCLUDED
#define GRPC_google_2fcloud_2fdialogflow_2fv2beta1_2fsession_2eproto__INCLUDED

#include "google/cloud/dialogflow/v2beta1/session.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace google {
namespace cloud {
namespace dialogflow {
namespace v2beta1 {

// Manages user sessions.
//
//
// Custom methods.
class Sessions final {
 public:
  static constexpr char const* service_full_name() {
    return "google.cloud.dialogflow.v2beta1.Sessions";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Processes a natural language query and returns structured, actionable data
    // as a result. This method is not idempotent, because it may cause contexts
    // and session entity types to be updated, which in turn might affect
    // results of future queries.
    virtual ::grpc::Status DetectIntent(::grpc::ClientContext* context, const ::google::cloud::dialogflow::v2beta1::DetectIntentRequest& request, ::google::cloud::dialogflow::v2beta1::DetectIntentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dialogflow::v2beta1::DetectIntentResponse>> AsyncDetectIntent(::grpc::ClientContext* context, const ::google::cloud::dialogflow::v2beta1::DetectIntentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dialogflow::v2beta1::DetectIntentResponse>>(AsyncDetectIntentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dialogflow::v2beta1::DetectIntentResponse>> PrepareAsyncDetectIntent(::grpc::ClientContext* context, const ::google::cloud::dialogflow::v2beta1::DetectIntentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dialogflow::v2beta1::DetectIntentResponse>>(PrepareAsyncDetectIntentRaw(context, request, cq));
    }
    // Processes a natural language query in audio format in a streaming fashion
    // and returns structured, actionable data as a result. This method is only
    // available via the gRPC API (not REST).
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentRequest, ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentResponse>> StreamingDetectIntent(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentRequest, ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentResponse>>(StreamingDetectIntentRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentRequest, ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentResponse>> AsyncStreamingDetectIntent(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentRequest, ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentResponse>>(AsyncStreamingDetectIntentRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentRequest, ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentResponse>> PrepareAsyncStreamingDetectIntent(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentRequest, ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentResponse>>(PrepareAsyncStreamingDetectIntentRaw(context, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dialogflow::v2beta1::DetectIntentResponse>* AsyncDetectIntentRaw(::grpc::ClientContext* context, const ::google::cloud::dialogflow::v2beta1::DetectIntentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dialogflow::v2beta1::DetectIntentResponse>* PrepareAsyncDetectIntentRaw(::grpc::ClientContext* context, const ::google::cloud::dialogflow::v2beta1::DetectIntentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentRequest, ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentResponse>* StreamingDetectIntentRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentRequest, ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentResponse>* AsyncStreamingDetectIntentRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentRequest, ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentResponse>* PrepareAsyncStreamingDetectIntentRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status DetectIntent(::grpc::ClientContext* context, const ::google::cloud::dialogflow::v2beta1::DetectIntentRequest& request, ::google::cloud::dialogflow::v2beta1::DetectIntentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::dialogflow::v2beta1::DetectIntentResponse>> AsyncDetectIntent(::grpc::ClientContext* context, const ::google::cloud::dialogflow::v2beta1::DetectIntentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::dialogflow::v2beta1::DetectIntentResponse>>(AsyncDetectIntentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::dialogflow::v2beta1::DetectIntentResponse>> PrepareAsyncDetectIntent(::grpc::ClientContext* context, const ::google::cloud::dialogflow::v2beta1::DetectIntentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::dialogflow::v2beta1::DetectIntentResponse>>(PrepareAsyncDetectIntentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentRequest, ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentResponse>> StreamingDetectIntent(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentRequest, ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentResponse>>(StreamingDetectIntentRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentRequest, ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentResponse>> AsyncStreamingDetectIntent(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentRequest, ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentResponse>>(AsyncStreamingDetectIntentRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentRequest, ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentResponse>> PrepareAsyncStreamingDetectIntent(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentRequest, ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentResponse>>(PrepareAsyncStreamingDetectIntentRaw(context, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::dialogflow::v2beta1::DetectIntentResponse>* AsyncDetectIntentRaw(::grpc::ClientContext* context, const ::google::cloud::dialogflow::v2beta1::DetectIntentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::dialogflow::v2beta1::DetectIntentResponse>* PrepareAsyncDetectIntentRaw(::grpc::ClientContext* context, const ::google::cloud::dialogflow::v2beta1::DetectIntentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentRequest, ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentResponse>* StreamingDetectIntentRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentRequest, ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentResponse>* AsyncStreamingDetectIntentRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentRequest, ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentResponse>* PrepareAsyncStreamingDetectIntentRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_DetectIntent_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamingDetectIntent_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Processes a natural language query and returns structured, actionable data
    // as a result. This method is not idempotent, because it may cause contexts
    // and session entity types to be updated, which in turn might affect
    // results of future queries.
    virtual ::grpc::Status DetectIntent(::grpc::ServerContext* context, const ::google::cloud::dialogflow::v2beta1::DetectIntentRequest* request, ::google::cloud::dialogflow::v2beta1::DetectIntentResponse* response);
    // Processes a natural language query in audio format in a streaming fashion
    // and returns structured, actionable data as a result. This method is only
    // available via the gRPC API (not REST).
    virtual ::grpc::Status StreamingDetectIntent(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentResponse, ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_DetectIntent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DetectIntent() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_DetectIntent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetectIntent(::grpc::ServerContext* context, const ::google::cloud::dialogflow::v2beta1::DetectIntentRequest* request, ::google::cloud::dialogflow::v2beta1::DetectIntentResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDetectIntent(::grpc::ServerContext* context, ::google::cloud::dialogflow::v2beta1::DetectIntentRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::dialogflow::v2beta1::DetectIntentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamingDetectIntent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_StreamingDetectIntent() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_StreamingDetectIntent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamingDetectIntent(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentResponse, ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentRequest>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamingDetectIntent(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentResponse, ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_DetectIntent<WithAsyncMethod_StreamingDetectIntent<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_DetectIntent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DetectIntent() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_DetectIntent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetectIntent(::grpc::ServerContext* context, const ::google::cloud::dialogflow::v2beta1::DetectIntentRequest* request, ::google::cloud::dialogflow::v2beta1::DetectIntentResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamingDetectIntent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_StreamingDetectIntent() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_StreamingDetectIntent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamingDetectIntent(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentResponse, ::google::cloud::dialogflow::v2beta1::StreamingDetectIntentRequest>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DetectIntent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DetectIntent() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::dialogflow::v2beta1::DetectIntentRequest, ::google::cloud::dialogflow::v2beta1::DetectIntentResponse>(std::bind(&WithStreamedUnaryMethod_DetectIntent<BaseClass>::StreamedDetectIntent, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DetectIntent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DetectIntent(::grpc::ServerContext* context, const ::google::cloud::dialogflow::v2beta1::DetectIntentRequest* request, ::google::cloud::dialogflow::v2beta1::DetectIntentResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDetectIntent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::dialogflow::v2beta1::DetectIntentRequest,::google::cloud::dialogflow::v2beta1::DetectIntentResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_DetectIntent<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_DetectIntent<Service > StreamedService;
};

}  // namespace v2beta1
}  // namespace dialogflow
}  // namespace cloud
}  // namespace google


#endif  // GRPC_google_2fcloud_2fdialogflow_2fv2beta1_2fsession_2eproto__INCLUDED
